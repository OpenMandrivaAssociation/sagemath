# HG changeset patch
# User R. Andrew Ohana <andrew.ohana@gmail.com>
# Date 1368315598 25200
#      Sat May 11 16:39:58 2013 -0700
# Node ID fa50e5f80bc33a4cf32cccf0ef04a04b3814e5b8
# Parent  75a1095ab5b4f6bcb7c8467bb37256d4b1841ae3
Upgrade to Cython 0.19.1

diff --git a/sage/groups/perm_gps/partn_ref/canonical_augmentation.pxd b/sage/groups/perm_gps/partn_ref/canonical_augmentation.pxd
--- a/sage/groups/perm_gps/partn_ref/canonical_augmentation.pxd
+++ b/sage/groups/perm_gps/partn_ref/canonical_augmentation.pxd
@@ -28,7 +28,7 @@
 
 cdef struct iterator:
     void *data
-    void *(*next)(void *data, int *degree, int *mem_err)
+    void *(*next)(void *data, int *degree, bint *mem_err)
 
 cdef struct canonical_generator_data:
     StabilizerChain *group
@@ -56,28 +56,28 @@
     int (*compare_structures)(int *, int *, void *, void *, int)
     
     int (*generate_children)(void *, aut_gp_and_can_lab *, iterator *)
-    void *(*apply_augmentation)(void *, void *, void *, int *, int *)
+    void *(*apply_augmentation)(void *, void *, void *, int *, bint *)
     void (*free_object)(void *)
     void (* free_iter_data)(void *)
     void (*free_aug)(void *)
-    void *(*canonical_parent)(void *child, void *parent, int *permutation, int *degree, int *)
+    void *(*canonical_parent)(void *child, void *parent, int *permutation, int *degree, bint *)
 
 cdef canonical_generator_data *allocate_cgd(int, int)
 
 cdef void deallocate_cgd(canonical_generator_data *)
 
-cdef void *canonical_generator_next(void *, int *, int *)
+cdef void *canonical_generator_next(void *, int *, bint *)
 
 cdef iterator *setup_canonical_generator(int degree, 
     bint (*all_children_are_equivalent)(PartitionStack *, void *),
     int (*refine_and_return_invariant)(PartitionStack *, void *, int *, int),
     int (*compare_structures)(int *, int *, void *, void *, int),
     int (*generate_children)(void *, aut_gp_and_can_lab *, iterator *),
-    void *(*apply_augmentation)(void *, void *, void *, int *, int *),
+    void *(*apply_augmentation)(void *, void *, void *, int *, bint *),
     void (*free_object)(void *),
     void (* free_iter_data)(void *),
     void (*free_aug)(void *),
-    void *(*canonical_parent)(void *, void *, int *, int *, int *),
+    void *(*canonical_parent)(void *, void *, int *, int *, bint *),
     int max_depth, bint reduce_children,
     iterator *cangen_prealloc) except NULL
 
diff --git a/sage/groups/perm_gps/partn_ref/canonical_augmentation.pyx b/sage/groups/perm_gps/partn_ref/canonical_augmentation.pyx
--- a/sage/groups/perm_gps/partn_ref/canonical_augmentation.pyx
+++ b/sage/groups/perm_gps/partn_ref/canonical_augmentation.pyx
@@ -92,7 +92,7 @@
 
     Signature:
     
-    ``void *apply_augmentation(void *parent, void *aug, void *child, int *degree, int *mem_err)``
+    ``void *apply_augmentation(void *parent, void *aug, void *child, int *degree, bint *mem_err)``
     
     This function takes the ``parent``, applies the augmentation ``aug`` and
     returns a pointer to the corresponding child object (freeing aug if
@@ -130,7 +130,7 @@
     
     Signature:
     
-    ``void *canonical_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err)``
+    ``void *canonical_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err)``
     
     Apply the ``permutation`` to the ``child``, determine an arbitrary but fixed
     parent, apply the inverse of ``permutation`` to that parent, and return the
@@ -165,7 +165,7 @@
 
 include 'data_structures_pyx.pxi' # includes bitsets
 
-cdef void *canonical_generator_next(void *can_gen_data, int *degree, int *mem_err):
+cdef void *canonical_generator_next(void *can_gen_data, int *degree, bint *mem_err):
     r"""
     This function is part of the iterator struct which will iterate over
     objects. Return value of ``NULL`` indicates termination.
@@ -376,11 +376,11 @@
          (PartitionStack *PS, void *S, int *cells_to_refine_by, int ctrb_len),
     int (*compare_structures)(int *gamma_1, int *gamma_2, void *S1, void *S2, int degree),
     int (*generate_children)(void *, aut_gp_and_can_lab *, iterator *),
-    void *(*apply_augmentation)(void *, void *, void *, int *, int *),
+    void *(*apply_augmentation)(void *, void *, void *, int *, bint *),
     void (*free_object)(void *),
     void (*free_iter_data)(void *),
     void (*free_aug)(void *),
-    void *(*canonical_parent)(void *child, void *parent, int *permutation, int *degree, int *mem_err),
+    void *(*canonical_parent)(void *child, void *parent, int *permutation, int *degree, bint *mem_err),
     int max_depth, bint reduce_children, iterator *cangen_prealloc) except NULL:
     """
     Canonical generation of isomorphism classes of objects.
diff --git a/sage/groups/perm_gps/partn_ref/refinement_graphs.pxd b/sage/groups/perm_gps/partn_ref/refinement_graphs.pxd
--- a/sage/groups/perm_gps/partn_ref/refinement_graphs.pxd
+++ b/sage/groups/perm_gps/partn_ref/refinement_graphs.pxd
@@ -46,17 +46,17 @@
     iterator *edge_iterator
     void *graph
 
-cdef void *dg_edge_gen_next(void *, int *, int *)
+cdef void *dg_edge_gen_next(void *, int *, bint *)
 
 cdef int gen_children_dg_edge(void *S, aut_gp_and_can_lab *group, iterator *it)
-cdef void *apply_dg_edge_aug(void *parent, void *aug, void *child, int *degree, int *mem_err)
+cdef void *apply_dg_edge_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err)
 cdef void free_dg_edge(void *child)
-cdef void *canonical_dg_edge_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err)
+cdef void *canonical_dg_edge_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err)
 
 cdef int gen_children_dg_vert(void *S, aut_gp_and_can_lab *group, iterator *it)
-cdef void *apply_dg_vert_aug(void *parent, void *aug, void *child, int *degree, int *mem_err)
+cdef void *apply_dg_vert_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err)
 cdef void free_dg_vert(void *child)
-cdef void *canonical_dg_vert_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err)
+cdef void *canonical_dg_vert_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err)
 
 
 
diff --git a/sage/groups/perm_gps/partn_ref/refinement_graphs.pyx b/sage/groups/perm_gps/partn_ref/refinement_graphs.pyx
--- a/sage/groups/perm_gps/partn_ref/refinement_graphs.pyx
+++ b/sage/groups/perm_gps/partn_ref/refinement_graphs.pyx
@@ -1034,7 +1034,7 @@
 # * Seed objects are graphs with n vertices and no edges.
 # * Augmentations consist of adding a single edge, or a loop.
 
-cdef void *dg_edge_gen_next(void *data, int *degree, int *mem_err):
+cdef void *dg_edge_gen_next(void *data, int *degree, bint *mem_err):
     r"""
     The ``next`` function in an edge iterator. The iterator generates unique
     representatives under the action of the automorphism group of the parent
@@ -1044,7 +1044,8 @@
     cdef dg_edge_gen_data *degd = <dg_edge_gen_data *> data
     cdef GraphStruct graph = <GraphStruct> degd.graph
     cdef subset *edge_candidate
-    cdef int u, v, reject, mem_err_sub = 0
+    cdef int u, v, reject
+    cdef bint mem_err_sub = 0
     if mem_err[0]:
         (<canonical_generator_data *> degd.edge_iterator.data).mem_err = 1
     while 1:
@@ -1114,7 +1115,7 @@
     dest.num_verts = src.num_verts
     dest.num_arcs  = src.num_arcs
 
-cdef void *apply_dg_edge_aug(void *parent, void *aug, void *child, int *degree, int *mem_err):
+cdef void *apply_dg_edge_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err):
     r"""
     Apply the augmentation to ``parent`` storing the result in ``child``. Here
     ``aug`` represents an edge to be added.
@@ -1172,7 +1173,7 @@
     Py_DECREF(GS.G)
     Py_DECREF(GS)
 
-cdef void *canonical_dg_edge_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err):
+cdef void *canonical_dg_edge_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err):
     r"""
     Applies ``permutation`` to ``child``, determines an arbitrary parent by
     deleting the lexicographically largest edge, applies the inverse of
@@ -1381,7 +1382,7 @@
         start_canonical_generator(group.group, NULL, n, subset_iterator)
     return (subset_iterator is NULL)
 
-cdef void *apply_dg_vert_aug(void *parent, void *aug, void *child, int *degree, int *mem_err):
+cdef void *apply_dg_vert_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err):
     r"""
     Apply the augmentation to ``parent`` storing the result in ``child``. Here
     ``aug`` represents a subset to join to a new vertex.
@@ -1440,7 +1441,7 @@
     Py_DECREF(GS.G)
     Py_DECREF(GS)
 
-cdef void *canonical_dg_vert_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err):
+cdef void *canonical_dg_vert_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err):
     r"""
     Applies ``permutation`` to ``child``, determines an arbitrary parent by
     deleting the lexicographically largest vertex, applies the inverse of
diff --git a/sage/groups/perm_gps/partn_ref/refinement_sets.pxd b/sage/groups/perm_gps/partn_ref/refinement_sets.pxd
--- a/sage/groups/perm_gps/partn_ref/refinement_sets.pxd
+++ b/sage/groups/perm_gps/partn_ref/refinement_sets.pxd
@@ -46,13 +46,13 @@
 cdef void *allocate_sgd(int)
 cdef void deallocate_sgd(void *)
 
-cdef void *subset_generator_next(void *, int *, int *)
+cdef void *subset_generator_next(void *, int *, bint *)
 
 cdef int generate_child_subsets(void *S, aut_gp_and_can_lab *group, iterator *it)
-cdef void *apply_subset_aug(void *parent, void *aug, void *child, int *degree, int *mem_err)
+cdef void *apply_subset_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err)
 cdef void free_subset(void *child)
 cdef void free_subset_aug(void *)
-cdef void *canonical_set_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err)
+cdef void *canonical_set_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err)
 
 cdef iterator *allocate_subset_gen(int degree, int max_size)
 cdef int allocate_subset_gen_2(int degree, int max_size, iterator *it)
diff --git a/sage/groups/perm_gps/partn_ref/refinement_sets.pyx b/sage/groups/perm_gps/partn_ref/refinement_sets.pyx
--- a/sage/groups/perm_gps/partn_ref/refinement_sets.pyx
+++ b/sage/groups/perm_gps/partn_ref/refinement_sets.pyx
@@ -528,7 +528,7 @@
         OP_dealloc(sgd.orbits)
     sage_free(sgd)
 
-cdef void *subset_generator_next(void *data, int *degree, int *mem_err):
+cdef void *subset_generator_next(void *data, int *degree, bint *mem_err):
     r"""
     Returns the next element to consider adding to the set.
     """
@@ -565,7 +565,7 @@
     sgd.bits = subset1.bits
     return 0
 
-cdef void *apply_subset_aug(void *parent, void *aug, void *child, int *degree, int *mem_err):
+cdef void *apply_subset_aug(void *parent, void *aug, void *child, int *degree, bint *mem_err):
     r"""
     Adds the element represented by ``aug`` to ``parent``, storing the result to
     ``child``.
@@ -581,7 +581,7 @@
 cdef void free_subset_aug(void *aug):
     return
 
-cdef void *canonical_set_parent(void *child, void *parent, int *permutation, int *degree, int *mem_err):
+cdef void *canonical_set_parent(void *child, void *parent, int *permutation, int *degree, bint *mem_err):
     r"""
     Determines the canonical parent of the set ``child`` by applying
     ``permutation``, deleting the largest element in lexicographic order, and
