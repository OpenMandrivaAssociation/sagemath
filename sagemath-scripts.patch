diff -up sage-5.13/spkg/bin/sage.orig sage-5.13/spkg/bin/sage
--- sage-5.13/spkg/bin/sage.orig	2014-01-28 15:47:54.216156627 -0200
+++ sage-5.13/spkg/bin/sage	2014-01-28 15:55:18.058173623 -0200
@@ -11,17 +11,14 @@ usage() {
     echo "  file.<sage|py|spyx> -- run given .sage, .py or .spyx files"
     echo "  -advanced           -- list all command line options"
     echo "  -c <cmd>            -- Evaluates cmd as sage code"
-    echo "  -experimental       -- list all experimental packages that can be installed"
     echo "  -gap [...]          -- run Sage's Gap with given arguments"
     echo "  -gp [...]           -- run Sage's PARI/GP calculator with given arguments"
     echo "  -h, -?              -- print this help message"
-    echo "  -i [packages]       -- install the given Sage packages"
     echo "  -inotebook [...]    -- start the *insecure* Sage notebook"
     echo "  -maxima [...]       -- run Sage's Maxima with given arguments"
     echo "  -mwrank [...]       -- run Sage's mwrank with given arguments"
     echo "  -n, -notebook [...] -- start the Sage notebook (options are the same"
     echo "                         as for the notebook command in Sage)"
-    echo "  -optional           -- list all optional packages that can be installed"
     echo "  -python [...]       -- run the Python interpreter"
     echo "  -R [...]            -- run Sage's R with given arguments"
     echo "  -singular [...]     -- run Sage's singular with given arguments"
@@ -37,10 +34,6 @@ usage() {
     echo "                           --optional - controls which optional tests are run"
     echo "                           --sagenb - test all sagenb files"
     echo "                           --help - show all testing options"
-    echo "  -upgrade [url]      -- download, build and install standard packages from"
-    echo "                         given url.  If url not given, automatically selects a"
-    echo "                         suitable mirror.  If url='ask', it lets you select"
-    echo "                         the mirror (uses SAGE_SERVER as default)."
     echo "  -v, -version        -- print the Sage version"
     exit 0
 }
@@ -64,14 +57,14 @@ usage_advanced() {
     echo "  -root               -- print the Sage root directory"
     echo "  -gthread, -qthread, -q4thread, -wthread, -pylab"
     echo "                      -- pass the option through to ipython"
+    echo "  -testall [options]  -- test all source files, docs, and examples.  options"
+    echo "                         like -t"
     echo "  -v, -version        -- print the Sage version"
 
     echo
     ####  1.......................26..................................................78
     ####  |.....................--.|...................................................|
     echo "Running the notebook:"
-    echo "  -bn, -build-and-notebook [...] -- build the Sage library then start"
-    echo "                         the Sage notebook"
     echo "  -inotebook [...]    -- start the *insecure* Sage notebook"
     echo "  -n, -notebook [...] -- start the Sage notebook (options are the same"
     echo "                         as for the notebook command in Sage)"
@@ -86,16 +79,10 @@ usage_advanced() {
     echo "  -gap [...]          -- run Sage's Gap with given arguments"
     echo "  -gdb                -- run Sage under the control of gdb"
     echo "  -gp [...]           -- run Sage's PARI/GP calculator with given arguments"
-    echo "  -hg [...]           -- run Sage's Mercurial with given arguments"
     echo "  -ipython [...]      -- run Sage's IPython using the default environment (not"
     echo "                         Sage), passing additional options to IPython"
-    echo "  -kash [...]         -- run Sage's Kash with given arguments"
-    test -x "$SAGE_LOCAL/bin/kash" || \
-    echo "                         (not installed currently, run sage -i kash)"
     echo "  -lisp [...]         -- run Lisp interpreter included with Sage"
     echo "  -M2 [...]           -- run Sage's Macaulay2 with given arguments"
-    test -x "$SAGE_LOCAL/bin/M2" || \
-    echo "                         (not installed currently, run sage -i macaulay2)"
     echo "  -maxima [...]       -- run Sage's Maxima with given arguments"
     echo "  -mwrank [...]       -- run Sage's mwrank with given arguments"
     echo "  -python [...]       -- run the Python interpreter"
@@ -109,83 +96,10 @@ usage_advanced() {
     echo
     ####  1.......................26..................................................78
     ####  |.....................--.|...................................................|
-    echo "Installing packages and upgrading:"
-    echo "  -experimental       -- list all experimental packages that can be installed"
-    echo "  -f [opts] [packages]-- shortcut for -i -f: force build of the given Sage"
-    echo "                         packages"
-    echo "  -i [opts] [packages]-- install the given Sage packages (unless they are"
-    echo "                         already installed); if no packages are given, print"
-    echo "                         a list of all installed packages.  Options:"
-    echo "                           -c -- run the packages' test suites"
-    echo "                           -f -- force build: install the packages even"
-    echo "                                 if they are already installed"
-    echo "                           -s -- do not delete the spkg/build directories"
-    echo "                                 after a successful build"
-    echo "  -info [packages]    -- print the SPKG.txt of the given packages"
-    echo "  -optional           -- list all optional packages that can be installed"
-    echo "  -standard           -- list all standard packages that can be installed"
-   #echo "  -update             -- download latest non-optional Sage packages (do not build them)"
-   #echo "  -update-build       -- build and install all downloaded non-optional Sage packages"
-    echo "  -upgrade [url]      -- download, build and install standard packages from"
-    echo "                         given url.  If url not given, automatically selects a"
-    echo "                         suitable mirror.  If url='ask', it lets you select"
-    echo "                         the mirror (uses SAGE_SERVER as default)."
-
-    echo
-    ####  1.......................26..................................................78
-    ####  |.....................--.|...................................................|
-    echo "Building and testing the Sage library:"
-    echo "  -b [branch]         -- build Sage library.  If branch is given, switch to"
-    echo "                         branch in devel/sage-branch and build that branch"
-    echo "  -sync-build         -- delete old code and other files in the Sage library"
-    echo "                         that have already been deleted from devel/sage but"
-    echo "                         remain in the build directory.  This is sometimes"
-    echo "                         necessary because \`sage -b\` merely copies new or"
-    echo "                         modified files to the target directory."
-    echo "  -ba [branch]        -- same as -b and rebuild all Cython code"
-    echo "  -ba-force [branch]  -- same as -ba, but don't query before rebuilding"
-    echo "  -br [branch]        -- switch to, build, and run Sage given branch"
-    echo "  -branch             -- print the current Sage branch"
-    echo "  -bt [...]           -- build and test, options like -t below"
-    echo "  -btp <N> [...]      -- build and test parallel, options like -tp below"
-    echo "  -btnew [...]        -- build and test modified files, options like -tnew"
-    echo "  -clone [new branch] -- clone a new branch of the Sage library from the"
-    echo "                         current branch"
-    echo "  -fixdoctests <file.py> [output_file] [--long]"
-    echo "                      -- writes a new version of file.py to output_file"
-    echo "                         (defaults: to file.py.out) that will pass the doctests."
-    echo "                         With the optional --long argument the long time tests"
-    echo "                         are also checked."
-    echo "                         A patch for the new file is printed to stdout."
-    echo "  -startuptime [module] -- display how long each component of Sage takes to"
-    echo "                         start up; optionally specify a module to get more"
-    echo "                         details about that particular module"
-    echo "  -t [options] <--all|files|dir>"
-    echo "                      -- test examples in .py, .pyx, .sage, .tex or .rst files"
-    echo "                         selected options:"
-    echo "                           --long - include lines with the phrase 'long time'"
-    echo "                           --verbose - print debugging output during the test"
-    echo "                           --optional - controls which optional tests are run"
-    echo "                           --randorder[=seed] - randomize order of tests"
-    echo "                           --new - only test files modified since last commit"
-    echo "                           --initial - only show the first failure per block"
-    echo "                           --debug - drop into PDB after an unexpected error"
-    echo "                           --failed - only test files that failed last test"
-    echo "                           --sagenb - test all sagenb files"
-    echo "                           --help - show all testing options"
-    echo "  -tp <N> [...]       -- like -t above, but tests in parallel using N threads"
-    echo "                         with 0 interpreted as a sensible default"
-    echo "  -testall [options]  -- test all source files, docs, and examples.  options"
-    echo "                         like -t"
-
-    echo
-    ####  1.......................26..................................................78
-    ####  |.....................--.|...................................................|
     echo "Documentation:"
     echo "  -coverage <files>   -- give info about doctest coverage of files"
     echo "  -coverageall        -- give summary info about doctest coverage of all"
     echo "                         files in the Sage library"
-    echo "  -docbuild [lang/]<document> <html|pdf|...> -- Build the Sage documentation"
     echo "  -search_src <string> -- search through all the Sage library code for string"
     echo "  -search_doc <string> -- search through the Sage documentation for string"
     echo "  -grep <string>      -- same as -search_src"
@@ -205,19 +119,6 @@ usage_advanced() {
     echo
     ####  1.......................26..................................................78
     ####  |.....................--.|...................................................|
-    echo "Making Sage packages or distributions:"
-    echo "  -bdist VER          -- build a binary distribution of Sage"
-    echo "  -combinat [...]     -- run sage-combinat patch management script"
-    echo "  -crap sage-ver.tar  -- detect suspicious garbage in sage source tarball"
-    echo "  -pkg <dir>          -- create Sage package dir.spkg from a given directory"
-    echo "  -pkg_nc <dir>       -- as -pkg, but do not compress the package"
-    echo "  -rsyncdist VER      -- build an rsyncable source distribution of Sage (you"
-    echo "                         must first run sage -sdist VER for this to work)"
-    echo "  -sdist VER          -- build a source distribution of Sage"
-
-    echo
-    ####  1.......................26..................................................78
-    ####  |.....................--.|...................................................|
     echo "Valgrind memory debugging:"
     echo "  -cachegrind         -- run Sage using Valgrind's cachegrind tool.  The log"
     echo "                         files are named sage-cachegrind.PID can be found in"
@@ -231,9 +132,6 @@ usage_advanced() {
     echo "  -memcheck           -- run Sage using Valgrind's memcheck tool.  The log"
     echo "                         files are named sage-memcheck.PID can be found in"
     echo "                         $DOT_SAGE"
-    echo "  -omega              -- run Sage using Valgrind's omega tool.  The log"
-    echo "                         files are named sage-omega.PID can be found in"
-    echo "                         $DOT_SAGE"
     echo "  -valgrind           -- this is an alias for -memcheck"
     echo
     echo "You can also use -- before a long option, e.g., 'sage --optional'."
@@ -253,15 +151,6 @@ if [ "$1" = '--nodotsage' ]; then
     exit $status
 fi
 
-# Make sure this doesn't produce output (in case we use this in scripts).
-. "$SAGE_ROOT/spkg/bin/sage-env" >&2
-if [ $? -ne 0 ]; then
-    echo >&2 "Error setting environment variables by sourcing '$SAGE_ROOT/spkg/bin/sage-env';"
-    echo >&2 "possibly contact sage-devel (see http://groups.google.com/group/sage-devel)."
-    exit 1
-fi
-
-
 if [ $# -gt 0 ]; then
   if [ "$1" = '-h' -o "$1" = '-?' -o "$1" = '-help' -o "$1" = '--help' ]; then
      usage
@@ -274,25 +163,11 @@ fi
 
 # Prepare for running Sage, either interactively or non-interactively.
 sage_setup() {
-    # Check that we're not in a source tarball which hasn't been built yet (#13561).
-    if [ ! -d "$SAGE_LOCAL/lib/python/site-packages/sage" ]; then
-        echo >&2 '************************************************************************'
-        echo >&2 'It seems that you are attempting to run Sage from an unpacked source'
-        echo >&2 'tarball, but you have not compiled it yet (or maybe the build has not'
-        echo >&2 'finished). You should run `make` in the Sage root directory first.'
-        echo >&2 'If you did not intend to build Sage from source, you should download'
-        echo >&2 'a binary tarball instead. Read README.txt for more information.'
-        echo >&2 '************************************************************************'
-        exit 1
-    fi
-
     # Display the startup banner
     if [ "$SAGE_BANNER" != "no" ]; then
         cat "$SAGE_LOCAL/bin/sage-banner"
     fi
 
-    maybe_sage_location
-
     if [ ! -d "$IPYTHONDIR" ]; then
         # make sure that $DOT_SAGE exists so that ipython will happily
         # create its config directories there.  If DOT_SAGE doesn't
@@ -303,20 +178,6 @@ sage_setup() {
 }
 
 
-# Check to see if the whole Sage install tree has moved.  If so,
-# change various hardcoded paths.  Skip this if we don't have write
-# access to $SAGE_LOCAL (e.g. when running as a different user) or
-# if Python and sage-location haven't been installed yet.
-maybe_sage_location()
-{
-    if [ -w "$SAGE_LOCAL" ]; then
-        if [ -x "$SAGE_LOCAL/bin/python" ] && [ -x "$SAGE_LOCAL/bin/sage-location" ]; then
-            sage-location || exit $?
-        fi
-    fi
-}
-
-
 # Start an interactive Sage session, this function never returns.
 interactive_sage() {
     sage_setup
@@ -357,12 +218,6 @@ if [ "$1" = '-root'  -o "$1" = '--root'
     exit 0
 fi
 
-if [ "$1" = '-branch'  -o "$1" = '--branch' ]; then
-    cd "$SAGE_ROOT/devel/sage"
-    pwd -P | sed 's|.*/||; s|^sage-||'
-    exit $?
-fi
-
 #####################################################################
 # Run Sage's versions of the standard Algebra/Geometry etc. software
 #####################################################################
@@ -372,29 +227,24 @@ if [ "$1" = '-axiom' -o "$1" = '--axiom'
     exec axiom "$@"
 fi
 
-if [ "$1" = '-combinat' -o "$1" = '--combinat' ]; then
-    shift
-    exec sage-combinat "$@"
-fi
-
 if [ "$1" = '-gap' -o "$1" = '--gap' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/gap" "$@"
+    exec gap "$@"
 fi
 
 if [ "$1" = '-gp' -o "$1" = '--gp' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/gp" "$@"
+    exec gp "$@"
 fi
 
 if [ "$1" = '-singular' -o "$1" = '--singular' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/singular" "$@"
+    exec Singular "$@"
 fi
 
 if [ "$1" = '-sqlite3' -o "$1" = '--sqlite3' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/sqlite3" "$@"
+    exec sqlite3 "$@"
 fi
 
 if [ "$1" = '-sws2rst' -o "$1" = '--sws2rst' ]; then
@@ -404,47 +254,37 @@ fi
 
 if [ "$1" = '-twistd' -o "$1" = '--twistd' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/twistd" "$@"
+    exec twistd "$@"
 fi
 
 if [ "$1" = '-ecl' -o "$1" = '--ecl' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/ecl" "$@"
+    exec ecl "$@"
 fi
 
 if [ "$1" = '-lisp' -o "$1" = '--lisp' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/ecl" "$@"
-fi
-
-if [ "$1" = '-kash' -o "$1" = '--kash' ]; then
-    shift
-    exec "$SAGE_LOCAL/bin/kash" "$@"
-fi
-
-if [ "$1" = '-fixdoctests' -o "$1" = '--fixdoctests' ]; then
-    shift
-    exec sage-fixdoctests "$@"
+    exec ecl "$@"
 fi
 
 if [ "$1" = '-maxima' -o "$1" = '--maxima' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/maxima" "$@"
+    exec maxima "$@"
 fi
 
 if [ "$1" = '-mwrank' -o "$1" = '--mwrank' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/mwrank" "$@"
+    exec mwrank "$@"
 fi
 
 if [ "$1" = '-M2' -o "$1" = '--M2' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/M2" "$@"
+    exec M2 "$@"
 fi
 
 if [ "$1" = '-scons' -o "$1" = '--scons' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/scons" "$@"
+    exec scons "$@"
 fi
 
 if [ "$1" = '-python' -o "$1" = '--python' ]; then
@@ -454,12 +294,12 @@ fi
 
 if [ "$1" = '-R' -o "$1" = '--R' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/R" "$@"
+    exec R "$@"
 fi
 
 if [ "$1" = '-ipython' -o "$1" = '--ipython' ]; then
     shift
-    exec "$SAGE_LOCAL/bin/ipython" "$@"
+    exec ipython "$@"
 fi
 
 if [ "$1" = '-sh' -o "$1" = '--sh' ]; then
@@ -580,28 +420,6 @@ EOF
     exit $status
 fi
 
-if [ "$1" = '-hg' -o "$1" = '--hg' ]; then
-    shift
-    # Disable HGPLAIN, so we use all user defaults
-    # (both in $SAGE_LOCAL/etc/mercurial and $HOME/.hgrc)
-    unset HGPLAIN
-    exec "$SAGE_LOCAL/bin/hg" "$@"
-fi
-
-#####################################################################
-# Test coverage of a module?
-#####################################################################
-
-if [ "$1" = "-coverage" -o "$1" = "--coverage" ]; then
-    shift
-    exec sage-coverage "$@"
-fi
-
-if [ "$1" = "-coverageall" -o "$1" = "--coverageall" ]; then
-    shift
-    exec sage-coverageall "$@"
-fi
-
 #####################################################################
 # File conversion
 #####################################################################
@@ -617,36 +435,15 @@ if [ "$1" = '-rst2sws' -o "$1" = '--rst2
 fi
 
 #####################################################################
-# Crap
-#####################################################################
-
-if [ "$1" = "-crap" -o "$1" = "--crap" ]; then
-    shift
-    exec sage-crap $@
-fi
-
-#####################################################################
 # Run Sage's versions of the standard Algebra/Geometry etc. software
 #####################################################################
 
-build_sage() {
-    maybe_sage_location
-    sage-build "$@" || exit $?
-}
-
 if [ "$1" = "-notebook" -o "$1" = '--notebook' -o "$1" = '-n' ]; then
     shift
     sage-cleaner &>/dev/null &
     exec sage-notebook "$@"
 fi
 
-if [ "$1" = "-bn" -o "$1" = "--build-and-notebook" ]; then
-    shift
-    build_sage
-    sage-cleaner &>/dev/null &
-    exec sage-notebook "$@"
-fi
-
 if [ "$1" = "-inotebook" -o "$1" = '--inotebook' ]; then
     shift
     sage-cleaner &>/dev/null &
@@ -665,79 +462,7 @@ if [ "$1" = '-grepdoc' -o "$1" = "--grep
    exit 0
 fi
 
-if [ "$1" = '-b' ]; then
-    shift
-    time build_sage "$@"
-    exit $?
-fi
-
-if [ "$1" = '-br' -o "$1" = "--br" ]; then
-    shift
-    build_sage "$@"
-    interactive_sage
-fi
-
-if [ "$1" = '-r' ]; then
-   shift
-   if [ "$1" != "" ]; then
-      cd "$SAGE_ROOT/devel/"
-      if [ ! -d "sage-$1" ]; then
-         echo >&2 "No such branch '$SAGE_ROOT/devel/sage-$1'"
-         echo >&2 "Use 'sage --clone' to create a new branch."
-         exit 1
-      fi
-      # On Solaris (and perhaps other systems), "ln -snf FILE LINK"
-      # doesn't remove LINK and then relink it, so we need to first
-      # delete LINK -- in this case, SAGE_ROOT/devel/sage -- and then
-      # create a new link.  We use the full path name to make sure we
-      # remove the correct file.
-      rm -f "$SAGE_ROOT/devel/sage"
-      ln -s "sage-$1" sage
-   fi
-   interactive_sage
-fi
-
-if [ "$1" = '-ba' ]; then
-    shift
-    echo " *** WARNING ***"
-    echo " You are about to rebuild the entire Sage library."
-    echo " This will take a significant amount of time."
-    echo " (Use --ba-force instead of -ba to skip this prompt.)"
-    echo -n " Do you want to proceed? [y/n] "
-    read CHOICE
-    while [ "$CHOICE" != "y" -a "$CHOICE" != "n" ]; do
-        echo -n " Choose one of y, n: "
-        read CHOICE
-    done
-    if [ $CHOICE = 'n' ]; then
-        exit 0
-    fi
-    build_sage -b "$@"
-    exit $?
-fi
-
-if [ "$1" = '-ba-force' -o "$1" = '--ba-force' ]; then
-    shift
-    build_sage -b "$@"
-    exit $?
-fi
-
-if [ "$1" = '-sync-build' -o "$1" = '--sync-build' ]; then
-    shift
-    cd "$SAGE_ROOT"
-    exec sage-sync-build.py "$@"
-fi
-
-if [ "$1" = '-clone' -o "$1" = "--clone" ]; then
-   shift
-   time sage-clone "$@"
-   exit $?
-fi
-
-if [ "$1" = '-t' -o "$1" = '-bt' -o "$1" = '-tp' -o "$1" = '-btp' ]; then
-    if [ "$1" = '-bt' -o "$1" = '-btp' ]; then
-        build_sage
-    fi
+if [ "$1" = '-t' -o "$1" = '-tp' ]; then
     if [ ! -f  "$DOT_SAGE"/init.sage ]; then
         echo >&2 "init.sage does not exist ... creating"
         touch "$DOT_SAGE"/init.sage
@@ -753,10 +478,7 @@ if [ "$1" = '-t' -o "$1" = '-bt' -o "$1"
     fi
 fi
 
-if [ "$1" = '-tnew' -o "$1" = '-btnew' ]; then
-    if [ "$1" = '-btnew' ]; then
-        build_sage
-    fi
+if [ "$1" = '-tnew' ]; then
     shift
     SAGE_BANNER="no"
     sage_setup
@@ -770,12 +492,6 @@ if [ "$1" = '-testall' -o "$1" = "--test
     exec sage-runtests -a "$@"
 fi
 
-if [ "$1" = '-patchbot' -o "$1" = "--patchbot" ]; then
-    shift
-    cd "$SAGE_ROOT"
-    exec "$SAGE_LOCAL/bin/patchbot/patchbot.py" "$@"
-fi
-
 if [ "$1" = '-c' ]; then
     shift
     SAGE_BANNER="no"
@@ -784,166 +500,6 @@ if [ "$1" = '-c' ]; then
     exec sage-eval "$@"
 fi
 
-install() {
-    maybe_sage_location
-
-    mkdir -p "$SAGE_LOGS"
-    for PKG in "$@"
-    do
-        # Check for options
-        case "$PKG" in
-            -f) OPTF="-f"
-                continue;;
-            -m) OPTS="-s"
-                echo >&2 "Warning: the -m option is deprecated since Sage 5.0.  Use -s instead."
-                continue;;
-            -s) OPTS="-s"
-                continue;;
-            -c) OPTC="-c"
-                continue;;
-            --check) OPTC="-c"
-                continue;;
-            -info) OPTINFO="--info"
-                continue;;
-            --info) OPTINFO="--info"
-                continue;;
-            -*) echo >&2 "Error: unknown option '$PKG'"
-                exit 2;;
-        esac
-
-        PKG_NAME=`echo "$PKG" | sed -e "s/\.spkg$//"`
-        PKG_NAME=`basename "$PKG_NAME"`
-
-        "$SAGE_ROOT"/spkg/pipestatus \
-            "sage-spkg $OPTINFO $OPTF $OPTS $OPTC '$PKG' 2>&1" \
-            "(trap '' SIGINT; tee -a '$SAGE_ROOT/logs/install.log' '$SAGE_LOGS/$PKG_NAME.log')"
-        # Do not try to install further packages if one failed
-        if [ $? -ne 0 ]; then
-            exit 1
-        fi
-    done
-    exit 0
-}
-
-if [ "$1" = '-optional' -o "$1" = "--optional" ]; then
-    exec sage-list-optional
-fi
-
-if [ "$1" = '-experimental' -o "$1" = "--experimental" ]; then
-    exec sage-list-experimental
-fi
-
-if [ "$1" = '-standard' -o "$1" = "--standard" ]; then
-    exec sage-list-standard
-fi
-
-if [ "$1" = '-i' ]; then
-    shift
-    # If there are no further arguments, simply list all installed
-    # packages.
-    if [ $# -eq 0 ]; then
-        exec sage-spkg
-    fi
-    install "$@"
-fi
-
-if [ "$1" = '-f' ]; then
-    shift
-    # If there are no further arguments, simply list all installed
-    # packages.
-    if [ $# -eq 0 ]; then
-        exec sage-spkg
-    fi
-    install -f "$@"
-fi
-
-if [ "$1" = '-info' -o "$1" = '--info' ]; then
-    shift
-    for PKG in "$@"
-    do
-        sage-spkg --info "$PKG" || exit $?
-    done
-    exit 0
-fi
-
-if [ "$1" = '-pkg' -o "$1" = '-spkg' -o "$1" = "--pkg" -o "$1" = "--spkg" ]; then
-    shift
-    exec sage-pkg "$@"
-fi
-
-if [ "$1" = '-pkg_nc' -o "$1" = "--pkg_nc" ]; then
-    shift
-    exec sage-pkg -n "$@"
-fi
-
-if [ "$1" = '-sdist' -o "$1" = "--sdist" ]; then
-    if [ $# -ne 2 ]; then
-        echo >&2 "** MISSING VERSION NUMBER! **"
-        exit 2
-    fi
-    maybe_sage_location
-    exec sage-sdist $2 "$SAGE_ROOT"
-fi
-
-if [ "$1" = '-rsyncdist' -o "$1" = "--rsyncdist" ]; then
-    if [ $# -ne 2 ]; then
-        echo >&2 "** MISSING VERSION NUMBER! **"
-        exit 2
-    fi
-    maybe_sage_location
-    exec sage-rsyncdist $2
-fi
-
-if [ "$1" = '-bdist' -o "$1" = "--bdist" ]; then
-    if [ $# -ne 2 ]; then
-        echo >&2 "** MISSING VERSION NUMBER! **"
-        exit 2
-    fi
-    maybe_sage_location
-    cd "$SAGE_ROOT"
-    exec sage-bdist $2 "$SAGE_ROOT"
-fi
-
-#if [ "$1" = '-update' ]; then
-#    sage-update
-#    exit $?
-#fi
-
-#if [ "$1" = '-update-build' -o "$1" = "--update-build" ]; then
-#    sage-update-build
-#    sage-update-build
-#    exit $?
-#fi
-
-if [ "$1" = '-upgrade' -o "$1" = "--upgrade" ]; then
-    shift
-    cd "$SAGE_ROOT"
-
-    # People often move the Sage install right before doing the upgrade, so it's
-    # important to fix any path hardcoding issues first, or certain library
-    # links will fail.
-    sage-location || exit $?
-
-    # Run sage-upgrade twice since when installing sage-scripts and a
-    # running script changes, it gets confused and exits with an error.
-    # Running again (with the script replaced) then fixes the problem.
-    sage-upgrade "$@"
-    if [ $? -eq 2 ]; then   # this exit code means the user elected not to do the upgrade at all.
-        exit 2
-    fi
-    echo "Double checking that all packages have been installed."
-    sage-upgrade "$@" || exit $?
-
-    # Check that Sage still works
-    sage-starts
-    exit $?
-fi
-
-if [ "$1" = "-docbuild" -o "$1" = "--docbuild" ]; then
-    shift
-    exec python "$SAGE_DOC/common/builder.py" "$@"
-fi
-
 if [ "$1" = '-gdb' -o "$1" = "--gdb" ]; then
     shift
     sage_setup
@@ -992,12 +548,6 @@ if [ "$1" = '-callgrind' -o "$1" = "--ca
     exec sage-callgrind "$@"
 fi
 
-if [ "$1" = '-omega' -o "$1" = "--omega" ]; then
-    shift
-    sage_setup
-    exec sage-omega "$@"
-fi
-
 if [ "$1" = '-startuptime' -o "$1" = '--startuptime' ]; then
     exec sage-startuptime.py "$@"
 fi
diff -up sage-5.13/spkg/build/sage_scripts-5.13/sage-runtests.orig sage-5.13/spkg/build/sage_scripts-5.13/sage-runtests
--- sage-5.13/spkg/build/sage_scripts-5.13/sage-runtests.orig	2014-01-28 15:46:59.796154543 -0200
+++ sage-5.13/spkg/build/sage_scripts-5.13/sage-runtests	2014-01-28 15:47:42.457156177 -0200
@@ -54,10 +54,6 @@ if __name__ == "__main__":
                       help="run doctests using Valgrind's cachegrind tool.  The log "
                          "files are named sage-cachegrind.PID and can be found in " +
                          os.path.join(os.environ["DOT_SAGE"], "valgrind"))
-    parser.add_option("--omega", action="store_true", default=False,
-                      help="run doctests using Valgrind's omega tool.  The log "
-                         "files are named sage-omega.PID and can be found in " +
-                         os.path.join(os.environ["DOT_SAGE"], "valgrind"))
 
     parser.add_option("-f", "--failed", action="store_true", default=False,
         help="doctest only those files that failed in the previous run")
diff -up sage-5.13/spkg/build/sage_scripts-5.13/sage-valgrind.orig sage-5.13/spkg/build/sage_scripts-5.13/sage-valgrind
--- sage-5.13/spkg/build/sage_scripts-5.13/sage-valgrind.orig	2014-01-28 15:46:59.800154543 -0200
+++ sage-5.13/spkg/build/sage_scripts-5.13/sage-valgrind	2014-01-28 15:47:20.081155320 -0200
@@ -11,7 +11,7 @@ fi
 LOG="$DOT_SAGE"/valgrind/sage-memcheck.%p
 echo "Log file is $LOG"
 
-MEMCHECK_FLAGS="--leak-resolution=high --log-file=$LOG --leak-check=full --num-callers=25 --suppressions=$SAGE_LOCAL/lib/valgrind/sage.supp "; export MEMCHECK_FLAGS
+MEMCHECK_FLAGS="--leak-resolution=high --log-file=$LOG --leak-check=full --num-callers=25 "; export MEMCHECK_FLAGS
 if [ "$SAGE_MEMCHECK_FLAGS" ]; then
     echo "Overwriting memcheck flags with:"
     echo $SAGE_MEMCHECK_FLAGS
