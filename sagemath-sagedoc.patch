--- src/doc/common/builder.py.orig	2014-05-10 15:44:39.046203443 -0300
+++ src/doc/common/builder.py	2014-05-10 15:45:03.225201708 -0300
@@ -32,7 +32,7 @@ from sage.env import SAGE_DOC, SAGE_SRC
 #     SAGE_DOC, LANGUAGES, SPHINXOPTS, PAPER, OMIT,
 #     PAPEROPTS, ALLSPHINXOPTS, NUM_THREADS, WEBSITESPHINXOPTS
 # from build_options.py.
-execfile(os.path.join(SAGE_DOC, 'common' , 'build_options.py'))
+execfile(os.path.join(os.getenv('SAGE_ROOT'), 'src', 'doc', 'common' , 'build_options.py'))
 
 
 def print_build_error():
--- src/doc/common/conf.py.orig	2014-05-10 15:44:59.936201944 -0300
+++ src/doc/common/conf.py	2014-05-10 15:45:03.229201708 -0300
@@ -1,5 +1,5 @@
 import sys, os, sphinx
-from sage.env import SAGE_DOC
+from sage.env import SAGE_DOC, SAGE_SRC
 
 def get_doc_abspath(path):
     """
@@ -202,8 +202,7 @@ if (os.environ.get('SAGE_DOC_MATHJAX', '
     from sage.misc.latex_macros import sage_mathjax_macros
     html_theme_options['mathjax_macros'] = sage_mathjax_macros()
 
-    from pkg_resources import Requirement, working_set
-    sagenb_path = working_set.find(Requirement.parse('sagenb')).location
+    sagenb_path = SAGE_SRC
     mathjax_relative = os.path.join('sagenb','data','mathjax')
 
     # It would be really nice if sphinx would copy the entire mathjax directory,
--- src/sage/doctest/control.py.orig	2014-05-10 15:44:59.940201944 -0300
+++ src/sage/doctest/control.py	2014-05-10 15:45:03.230201708 -0300
@@ -89,7 +89,6 @@ class DocTestDefaults(SageObject):
         self.valgrind = False
         self.massif = False
         self.cachegrind = False
-        self.omega = False
         self.failed = False
         self.new = False
         self.show_skipped = False
@@ -211,7 +210,7 @@ class DocTestController(SageObject):
             if options.gdb or options.debug:
                 # Interactive debuggers: "infinite" timeout
                 options.timeout = 0
-            elif options.valgrind or options.massif or options.cachegrind or options.omega:
+            elif options.valgrind or options.massif or options.cachegrind:
                 # Non-interactive debuggers: 48 hours
                 options.timeout = int(os.getenv('SAGE_TIMEOUT_VALGRIND', 48 * 60 * 60))
             elif options.long:
@@ -821,13 +820,8 @@ class DocTestController(SageObject):
             elif opt.cachegrind:
                 toolname = "cachegrind"
                 flags = os.getenv("SAGE_CACHEGRIND_FLAGS", "")
-            elif opt.omega:
-                toolname = "exp-omega"
-                flags = os.getenv("SAGE_OMEGA_FLAGS", "")
             cmd = "exec valgrind --tool=%s "%(toolname)
             flags += ''' --log-file="%s" ''' % logfile
-            if opt.omega:
-                toolname = "omega"
             if "%s" in flags:
                 flags %= toolname + ".%p" # replace %s with toolname
         cmd += flags + sage_cmd
@@ -887,10 +881,10 @@ class DocTestController(SageObject):
             0
         """
         opt = self.options
-        L = (opt.gdb, opt.valgrind, opt.massif, opt.cachegrind, opt.omega)
+        L = (opt.gdb, opt.valgrind, opt.massif, opt.cachegrind)
         if any(L):
             if L.count(True) > 1:
-                self.log("You may only specify one of gdb, valgrind/memcheck, massif, cachegrind, omega")
+                self.log("You may only specify one of gdb, valgrind/memcheck, massif, cachegrind")
                 return 2
             return self.run_val_gdb()
         else:
--- src/sage/interfaces/singular.py.orig	2014-05-10 15:44:59.940201944 -0300
+++ src/sage/interfaces/singular.py	2014-05-10 15:45:03.230201708 -0300
@@ -2149,7 +2149,7 @@ def generate_docstring_dictionary():
     nodes.clear()
     node_names.clear()
 
-    singular_docdir = os.environ["SAGE_LOCAL"]+"/share/singular/"
+    singular_docdir = os.environ["SINGULAR_BIN_DIR"]+"/info/"
 
     new_node = re.compile("File: singular\.hlp,  Node: ([^,]*),.*")
     new_lookup = re.compile("\* ([^:]*):*([^.]*)\..*")
--- src/sage/misc/latex_macros.py.orig	2014-05-10 15:44:59.940201944 -0300
+++ src/sage/misc/latex_macros.py	2014-05-10 15:45:03.232201708 -0300
@@ -142,7 +142,7 @@ def convert_latex_macro_to_mathjax(macro
         return name + ': ["' + defn + '",' + str(num_args) + ']'
 
 from superseded import deprecated_function_alias
-convert_latex_macro_to_jsmath = deprecated_function_alias(13508, convert_latex_macro_to_mathjax)
+convert_latex_macro_to_jsmath = convert_latex_macro_to_mathjax
 
 # To add a new macro for use in the Sage documentation, add a list or
 # tuple to the following list.  Each list (or tuple) should have the
